4torus.4mesh: Flat 4D torus
      x = cos(u);
      y = sin(u);
      z = cos(v);
      w = sin(v);
      where 0 <= u, v <= 2Pi
4torus.4off: same thing but using OFF file format

4tknot*-*.4mesh: torus knots on flat 4D torus. Note they are not
                 knotted in any 4D projection!

Klein1.4mesh: Klein bottle
      x = cos(u);
      y = sin(u);
      z = cos(v)*cos(u/2.0);
      w = sin(v);
      where 0 <= u, v <= 2Pi

Klein2.4mesh: another Klein bottle
      x = (1.0 + 0.3*cos(u)) * cos(v);
      y = (1.0 + 0.3*cos(u)) * cos(u/2) * sin(v);
      z = -(1.0 + 0.3*cos(u)) * sin(u/2) * sin(v);
      w = cos(u);
      where 0 <= u, v <= 2Pi

Spin.4mesh: knotted sphere generated by rotating a Trefoil;
SpinTwist.4mesh: knotted sphere generated by rotating and twisting a Trefoil;

hypercube.list: 2-simplices of a hypercube.

ks.4mesh: knotted sphere 
      X = sin(u/2) - 1.7*cos(2.0*u)*sin(u/2.0)*sin(u/2.0)*sin(u/2.0);
      x = cos(v) * X;
      y = -cos(u/2.0) + 2.0*sin(u)*sin(u/2)*sin(u/2);
      z = -sin(v)*X;
      w = 1.5*cos(2.5*u)*sin(u/2)*sin(u/2);
      where 0 <= u, v <= 2Pi

product<n><m>.list: surfaces of solutions to the equation (z1)^(n)*(z2)^(m)=1;
sum<n><m>.list: surfaces of solutions to the equation (z1)^(n)+(z2)^(m)=1,
	        where z1 and z2 are complex variables.

sphere.3mesh: ordinary 2-sphere;
square.3mesh: flat 2D square;
square.3off: flat 2D square;

rp2.4mesh: projective plane
      x = cos(u)*cos(u)*cos(v)*cos(v) - sin(u)*sin(u)*cos(v)*cos(v);
      y = sin(u)*cos(u)*cos(v)*cos(v);
      z = cos(u)*sin(v)*cos(v);
      w = sin(u)*sin(v)*cos(v);
      where 0 <= u, v <= Pi

proj.4mesh: another projective plane
      x = cos(u) * sin(v/2.0);
      y = sin(u) * sin(v/2.0);
      z = cos(2.0*u) * sin(v/4.0);
      w = -cos(v/2.0);
      where 0 <= u, v <= 2Pi

torus.3mesh: ordinary donut-like 3D torus
torus.off  : same thing but using OFF file format
torus-fine.3mesh: same thing but using more grid points, try it 
	          with band.pl or belladonna.pl to see the 4D 
	          depth contour lines!

umb.4mesh: some 4D surface, it looks like a sphere under some 4D 
           projection and has two Whitney umbrellas under another 
           4D projection.

